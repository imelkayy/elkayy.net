// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Mod {
  slug        String
  name        String
  summary     String
  provider    String?
  providerId  Int?
  updatedAt   DateTime
  url         String    @default("")
  section     String    @default("")
  logoUrl     String    @default("")

  settings    Setting[]
  game        Game      @relation(fields: [gameId], references: [id])
  gameId      Int

  published   Boolean   @default(false)

  @@id([slug, gameId])
}

model Setting {
  id          Int     @id @default(autoincrement())
  name        String
  key         String
  default     String
  description String
  type        Int

  Mod         Mod?    @relation(fields: [modSlug, modGame], references: [slug, gameId])
  modSlug     String?
  modGame     Int?

  @@unique([modSlug, modGame, key])
}

model Game {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  path  String  @unique
  
  mods Mod[]
}